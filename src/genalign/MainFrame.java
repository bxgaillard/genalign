/*
 * -----------------------------------------------------------------------------
 *
 * GenAlign: A Gene Alignment Program
 * Copyright (c) 2007 Benjamin Gaillard
 *
 * -----------------------------------------------------------------------------
 *
 *        File: MainFrame.java
 *
 * Description: Main Application Frame, Edited with JBuilder
 *
 * -----------------------------------------------------------------------------
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 59
 * Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * -----------------------------------------------------------------------------
 */


package genalign;

import java.util.StringTokenizer;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileFilter;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;

/**
 * The main application frame.
 */
public final class MainFrame extends JFrame {
    /**
     * The file reader state.
     */
    private final static int FR_BEGIN = 0, FR_UNKNOWN = 1,
			     FR_FASTA = 2, FR_GENBANK = 3;

    /**
     * Characters used for the random string generation.
     */
    private final static char[] RANDOM_CHARS = { 'A', 'T', 'G', 'C' };

    /**
     * The length of a generated random string.
     */
    private final static int RANDOM_LENGTH = 200;

    /**
     * Probabilities for events to occur for the second string generation.
     */
    private final static double PROBA_INS = 0.1, PROBA_DEL = 0.1,
				PROBA_SUB = 0.05;

    /**
     * Operation costs.
     */
    private final Costs costs = new Costs();

    /**
     * The file chooser.
     */
    private final JFileChooser chooser = new JFileChooser();

    /**
     * Spinner models.
     */
    private final SpinnerNumberModel insModel = new SpinnerNumberModel();
    private final SpinnerNumberModel delModel = new SpinnerNumberModel();
    private final SpinnerNumberModel subSameModel = new SpinnerNumberModel();
    private final SpinnerNumberModel subDiffModel = new SpinnerNumberModel();

    /**
     * Not used, but eliminates a warning.
     */
    private final static long serialVersionUID = 1L;

    /**
     * The frame contents.  Generated by jBuilder.
     */
    private JPanel contentPanel;
    private BorderLayout contentBorderLayout = new BorderLayout();
    private JTabbedPane contentTabbedPane = new JTabbedPane();
    private JTextArea gene1Text = new JTextArea();
    private JPanel alignmentTabPanel = new JPanel();
    private JTextArea gene2Text = new JTextArea();
    private BorderLayout alignmentTabBorderLayout = new BorderLayout();
    private JPanel genesPanel = new JPanel();
    private JPanel gene1Panel = new JPanel();
    private JPanel gene2Panel = new JPanel();
    private BorderLayout gene1BorderLayout = new BorderLayout();
    private BorderLayout gene2BorderLayout = new BorderLayout();
    private JPanel buttonsPanel = new JPanel();
    private GridLayout genesGridLayout = new GridLayout();
    private FlowLayout ButtonsFlowLayout = new FlowLayout();
    private JButton alignButton = new JButton();
    private JButton quitButton = new JButton();
    private JPanel gene1ButtonsPanel = new JPanel();
    private JPanel gene2ButtonsPanel = new JPanel();
    private JButton gene1LoadButton = new JButton();
    private JButton gene2LoadButton = new JButton();
    private JScrollPane gene2ScrollPane = new JScrollPane();
    private JScrollPane gene1ScrollPane = new JScrollPane();
    private JPanel costsPanel = new JPanel();
    private TitledBorder gene1TitledBorder = new TitledBorder("");
    private TitledBorder gene2TitledBorder = new TitledBorder("");
    private JPanel alignmentPanel = new JPanel();
    private TitledBorder alignmentTitledBorder = new TitledBorder("");
    private BorderLayout alignmentBorderLayout = new BorderLayout();
    private JScrollPane alignmentScrollPane = new JScrollPane();
    private JTextArea alignmentText = new JTextArea();
    private BorderLayout costsBorderLayout = new BorderLayout();
    private JPanel singlePanel = new JPanel();
    private JPanel substitutionsPanel = new JPanel();
    private GridLayout singleGridLayout = new GridLayout();
    private JPanel insertionsPanel = new JPanel();
    private JPanel deletionsPanel = new JPanel();
    private TitledBorder insertionsTitledBorder = new TitledBorder("");
    private TitledBorder deletionsTitledBorder = new TitledBorder("");
    private TitledBorder substitutionsTitledBorder = new TitledBorder("");
    private BorderLayout insertionsBorderLayout = new BorderLayout();
    private BorderLayout deletionsBorderLayout = new BorderLayout();
    private BorderLayout substitutionsBorderLayout = new BorderLayout();
    private JPanel geneBottomPanel = new JPanel();
    private BorderLayout geneBottomBorderLayout = new BorderLayout();
    private JButton randomButton = new JButton();
    private JButton generateButton = new JButton();
    private JPanel gene1ActionPanel = new JPanel();
    private JPanel gene2ActionPanel = new JPanel();
    private BorderLayout gene1ButtonsBorderLayout = new BorderLayout();
    private JPanel gene1LoadPanel = new JPanel();
    private BorderLayout gene2ButtonsBorderLayout = new BorderLayout();
    private JPanel gene2LoadPanel = new JPanel();
    private JButton gene1UppercaseButton = new JButton();
    private JButton gene2UppercaseButton = new JButton();
    private JPanel bottomPanel = new JPanel();
    private BorderLayout bottomBorderLayout = new BorderLayout();
    private JLabel authorLabel = new JLabel();
    private JPanel authorPanel = new JPanel();
    private JPanel substitutionsContainerPanel = new JPanel();
    private JPanel insertionsContainerPanel = new JPanel();
    private JPanel deletionsContainerPanel = new JPanel();
    private BorderLayout substitutionsContainerBorderLayout = new BorderLayout();
    private BorderLayout insertionsContainerBorderLayout = new BorderLayout();
    private BorderLayout deletionsContainerBorderLayout = new BorderLayout();
    private JPanel substitutionsButtonsPanel = new JPanel();
    private JPanel insertionsButtonsPanel = new JPanel();
    private JPanel deletionsButtonsPanel = new JPanel();
    private JSpinner insertionsSpinner = new JSpinner();
    private JSpinner deletionsSpinner = new JSpinner();
    private JButton insertionsButton = new JButton();
    private JButton deletionsButton = new JButton();
    private JPanel substitutionsTopPanel = new JPanel();
    private BorderLayout substitutionsTopBorderLayout = new BorderLayout();
    private JLabel sameLabel = new JLabel();
    private JSpinner sameSpinner = new JSpinner();
    private JLabel diffLabel = new JLabel();
    private JSpinner diffSpinner = new JSpinner();
    private JButton substitutionsButton = new JButton();
    private JPanel tablePanel = new JPanel();
    private BorderLayout tableBorderLayout = new BorderLayout();

    /**
     * Constructor.
     */
    public MainFrame() {
	insModel.setValue(new Double(costs.defaultIns));
	delModel.setValue(new Double(costs.defaultDel));
	subSameModel.setValue(new Double(costs.defaultSubSame));
	subDiffModel.setValue(new Double(costs.defaultSubDiff));

	try {
	    setDefaultCloseOperation(EXIT_ON_CLOSE);
	    jbInit();
	} catch (Exception exception) {
	    exception.printStackTrace();
	}

	final String[] geneExts = { "fasta", "fst", "gb", "genbank" };
	final String[] fastaExts = { "fasta", "fst" };
	final String[] genbankExts = { "gb", "genbank" };
	final String[] textExts = { "txt" };
	FileFilter[] filters = {
	    new ExtFileFilter("All gene files", geneExts),
	    new ExtFileFilter("FASTA files", fastaExts),
	    new ExtFileFilter("GenBank flat files", genbankExts),
	    new ExtFileFilter("Text files", textExts)
	};

	for (int i = 0; i < filters.length; i++)
	    chooser.addChoosableFileFilter(filters[i]);
	chooser.setFileFilter(filters[0]);
    }

    /**
     * Component initialization.  Generated by jBuilder.
     *
     * @throws java.lang.Exception
     */
    private void jbInit() throws Exception {
	contentPanel = (JPanel)getContentPane();
	contentPanel.setLayout(contentBorderLayout);
	this.setLocale(new java.util.Locale("en", "US", ""));
	setSize(new Dimension(500, 400));
	setTitle("GenAlign");
	gene1Text.setFont(new Font("Monospaced", Font.PLAIN, 12));
	gene1Text.setLineWrap(true);
	alignmentTabPanel.setLayout(alignmentTabBorderLayout);
	gene2Text.setFont(new Font("Monospaced", Font.PLAIN, 12));
	gene2Text.setLineWrap(true);
	genesPanel.setLayout(genesGridLayout);
	gene1Panel.setLayout(gene1BorderLayout);
	gene2Panel.setLayout(gene2BorderLayout);
	genesGridLayout.setColumns(1);
	genesGridLayout.setRows(0);
	buttonsPanel.setLayout(ButtonsFlowLayout);
	ButtonsFlowLayout.setAlignment(FlowLayout.RIGHT);
	alignButton.setText("Align!");
	alignButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		alignButton_actionPerformed(e);
	    }
	});
	quitButton.setText("Quit");
	quitButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		quitButton_actionPerformed(e);
	    }
	});
	gene1LoadButton.setText("Load from file...");
	gene1LoadButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		gene1LoadButton_actionPerformed(e);
	    }
	});
	gene2LoadButton.setText("Load from file...");
	gene2LoadButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		gene2LoadButton_actionPerformed(e);
	    }
	});
	gene1Panel.setBorder(gene1TitledBorder);
	gene2Panel.setBorder(gene2TitledBorder);
	gene1TitledBorder.setTitle("Gene 1");
	gene1TitledBorder.setBorder(BorderFactory.createEtchedBorder());
	gene2TitledBorder.setTitle("Gene 2");
	gene2TitledBorder.setBorder(BorderFactory.createEtchedBorder());
	alignmentPanel.setBorder(alignmentTitledBorder);
	alignmentPanel.setLayout(alignmentBorderLayout);
	alignmentTitledBorder.setTitle("Alignment");
	alignmentTitledBorder.setBorder(BorderFactory.createEtchedBorder());
	alignmentText.setFont(new java.awt.Font("Monospaced", Font.PLAIN, 12));
	alignmentText.setEditable(false);
	alignmentText.setText("\n");
	costsPanel.setLayout(costsBorderLayout);
	substitutionsPanel.setLayout(substitutionsBorderLayout);
	singlePanel.setLayout(singleGridLayout);
	singleGridLayout.setColumns(1);
	singleGridLayout.setRows(0);
	insertionsPanel.setLayout(insertionsBorderLayout);
	deletionsPanel.setLayout(deletionsBorderLayout);
	insertionsPanel.setBorder(insertionsTitledBorder);
	deletionsPanel.setBorder(deletionsTitledBorder);
	insertionsTitledBorder.setTitle("Insertions");
	insertionsTitledBorder.setBorder(BorderFactory.createEtchedBorder());
	deletionsTitledBorder.setTitle("Deletions");
	deletionsTitledBorder.setBorder(BorderFactory.createEtchedBorder());
	substitutionsTitledBorder.setTitle("Substitutions");
	substitutionsTitledBorder.setBorder(BorderFactory.createEtchedBorder());
	substitutionsPanel.setBorder(substitutionsTitledBorder);
	contentTabbedPane.addChangeListener(new ChangeListener() {
	    public void stateChanged(ChangeEvent e) {
		contentTabbedPane_stateChanged(e);
	    }
	});
	alignmentScrollPane.setHorizontalScrollBarPolicy(JScrollPane.
	    HORIZONTAL_SCROLLBAR_ALWAYS);
	alignmentScrollPane.setVerticalScrollBarPolicy(JScrollPane.
	    VERTICAL_SCROLLBAR_NEVER);
	geneBottomPanel.setLayout(geneBottomBorderLayout);
	randomButton.setText("Random");
	randomButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		randomButton_actionPerformed(e);
	    }
	});
	generateButton.setText("Generate from gene 1");
	generateButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		generateButton_actionPerformed(e);
	    }
	});
	gene1ButtonsPanel.setLayout(gene1ButtonsBorderLayout);
	gene2ButtonsPanel.setLayout(gene2ButtonsBorderLayout);
	gene1UppercaseButton.setText("Uppercase");
	gene1UppercaseButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		gene1UppercaseButton_actionPerformed(e);
	    }
	});
	gene2UppercaseButton.setText("Uppercase");
	gene2UppercaseButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		gene2UppercaseButton_actionPerformed(e);
	    }
	});
	bottomPanel.setLayout(bottomBorderLayout);
	authorLabel.setText("Copyright (c) 2007 Benjamin Gaillard");
	substitutionsContainerPanel.setLayout(
	    substitutionsContainerBorderLayout);
	insertionsContainerPanel.setLayout(insertionsContainerBorderLayout);
	deletionsContainerPanel.setLayout(deletionsContainerBorderLayout);
	insertionsButton.setText("Initialize");
	insertionsButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		insertionsButton_actionPerformed(e);
	    }
	});
	deletionsButton.setText("Initialize");
	deletionsButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		deletionsButton_actionPerformed(e);
	    }
	});
	insertionsSpinner.setModel(insModel);
	deletionsSpinner.setModel(delModel);
	substitutionsTopPanel.setLayout(substitutionsTopBorderLayout);
	sameLabel.setText("Same:");
	diffLabel.setText("Different:");
	substitutionsButton.setText("Initialize");
	substitutionsButton.addActionListener(new ActionListener() {
	    public void actionPerformed(ActionEvent e) {
		substitutionsButton_actionPerformed(e);
	    }
	});
	sameSpinner.setModel(subSameModel);
	diffSpinner.setModel(subDiffModel);
	tablePanel.setLayout(tableBorderLayout);
	contentPanel.add(contentTabbedPane, java.awt.BorderLayout.CENTER);
	contentTabbedPane.add(alignmentTabPanel, "Alignment");
	genesPanel.add(gene1Panel);
	buttonsPanel.add(alignButton);
	buttonsPanel.add(quitButton);
	authorPanel.add(authorLabel);
	gene1Panel.add(gene1ScrollPane, java.awt.BorderLayout.CENTER);
	genesPanel.add(gene2Panel);
	gene1ScrollPane.getViewport().add(gene1Text);
	contentTabbedPane.add(costsPanel, "Costs");
	gene2Panel.add(gene2ScrollPane, java.awt.BorderLayout.CENTER);
	gene2Panel.add(gene2ButtonsPanel, java.awt.BorderLayout.SOUTH);
	geneBottomPanel.add(alignmentPanel, java.awt.BorderLayout.CENTER);
	alignmentPanel.add(alignmentScrollPane, java.awt.BorderLayout.CENTER);
	alignmentScrollPane.getViewport().add(alignmentText);
	gene2ScrollPane.getViewport().add(gene2Text);
	gene1Panel.add(gene1ButtonsPanel, java.awt.BorderLayout.SOUTH);
	singlePanel.add(insertionsPanel);
	singlePanel.add(deletionsPanel);
	alignmentTabPanel.add(geneBottomPanel, java.awt.BorderLayout.SOUTH);
	costsPanel.add(substitutionsPanel, java.awt.BorderLayout.CENTER);
	costsPanel.add(singlePanel, java.awt.BorderLayout.NORTH);
	alignmentTabPanel.add(genesPanel, java.awt.BorderLayout.CENTER);
	alignmentTabPanel.add(geneBottomPanel, java.awt.BorderLayout.SOUTH);
	gene1ActionPanel.add(gene1UppercaseButton);
	gene1ActionPanel.add(randomButton);
	gene1LoadPanel.add(gene1LoadButton);
	gene2ActionPanel.add(gene2UppercaseButton);
	gene2ActionPanel.add(generateButton);
	gene2LoadPanel.add(gene2LoadButton);
	gene1ButtonsPanel.add(gene1ActionPanel, java.awt.BorderLayout.WEST);
	gene2ButtonsPanel.add(gene2ActionPanel, java.awt.BorderLayout.WEST);
	gene2ButtonsPanel.add(gene2LoadPanel, java.awt.BorderLayout.EAST);
	gene1ButtonsPanel.add(gene1LoadPanel, java.awt.BorderLayout.EAST);
	contentPanel.add(bottomPanel, java.awt.BorderLayout.SOUTH);
	bottomPanel.add(buttonsPanel, java.awt.BorderLayout.EAST);
	bottomPanel.add(authorPanel, java.awt.BorderLayout.WEST);
	substitutionsPanel.add(substitutionsContainerPanel,
			       java.awt.BorderLayout.CENTER);
	insertionsPanel.add(insertionsContainerPanel,
			    java.awt.BorderLayout.CENTER);
	insertionsButtonsPanel.add(insertionsSpinner);
	insertionsButtonsPanel.add(insertionsButton);
	deletionsPanel.add(deletionsContainerPanel,
			   java.awt.BorderLayout.CENTER);
	deletionsButtonsPanel.add(deletionsSpinner);
	deletionsButtonsPanel.add(deletionsButton);
	substitutionsPanel.add(substitutionsTopPanel, java.awt.BorderLayout.NORTH);
	substitutionsTopPanel.add(substitutionsButtonsPanel,
				  java.awt.BorderLayout.WEST);
	substitutionsButtonsPanel.add(sameLabel);
	substitutionsButtonsPanel.add(sameSpinner);
	substitutionsButtonsPanel.add(diffLabel);
	substitutionsButtonsPanel.add(diffSpinner);
	substitutionsButtonsPanel.add(substitutionsButton);
	deletionsPanel.add(deletionsButtonsPanel, java.awt.BorderLayout.WEST);
	insertionsPanel.add(insertionsButtonsPanel, java.awt.BorderLayout.WEST);
	contentTabbedPane.add(tablePanel, "Computed cost table");
    }

    /**
     * Strip characters from a string.
     *
     * @param string the string to strip.
     * @param chars  the characters to be stripped.
     *
     * @return the stripped string.
     */
    private static String stripChars(final String string, final String chars) {
	final char[] stripped = new char[string.length()];
	int pos = 0;

	for (int i = 0; i < string.length(); i++)
	    if (chars.indexOf(string.charAt(i)) == -1)
		stripped[pos++] = string.charAt(i);

	return new String(stripped, 0, pos);
    }

    /**
     * Strip a gene string from unwanted characters.
     *
     * @param string the string to strip.
     *
     * @return the stripped gene string.
     */
    private static String stripGene(final String gene) {
	return stripChars(gene, " \t\n\r-");
    }

    /**
     * Read a gene as a plain text file, stripping whitespace.
     *
     * @param file the file to read.
     *
     * @return the gene string contained in the file.
     */
    private static String readTextFile(final File file) {
	FileReader fileReader;
	try {
	    fileReader = new FileReader(file);
	} catch (FileNotFoundException exception) {
	    return null;
	}
	final LineNumberReader reader = new LineNumberReader(fileReader);

	String gene = "";

	while (true) {
	    String line;
	    try {
		line = reader.readLine();
	    } catch (IOException exception) {
		line = null;
	    }

	    if (line == null)
		break;
	    gene += line;
	}

	gene = stripGene(gene);
	if (gene.length() == 0)
	    return null;
	return gene;
    }

    /**
     * Open a gene file.  FASTA and GenBank are supported.
     *
     * @param file the file to read.
     *
     * @return the string contained in the file.
     */
    private static String readGeneFile(final File file) {
	FileReader fileReader;
	try {
	    fileReader = new FileReader(file);
	} catch (FileNotFoundException exception) {
	    return null;
	}
	final LineNumberReader reader = new LineNumberReader(fileReader);

	int state = FR_BEGIN;
	String gene = "";

	while (true) {
	    String line;
	    try {
		line = reader.readLine();
	    } catch (IOException exception) {
		line = null;
	    }
	    if (line == null)
		break;

	    switch (state) {
	    case FR_BEGIN:
		if (line.charAt(0) == '>')
		    state = FR_FASTA;
		else if (line.startsWith("ORIGIN"))
		    state = FR_GENBANK;
		else
		    state = FR_UNKNOWN;
		break;

	    case FR_UNKNOWN:
		if (line.startsWith("ORIGIN"))
		    state = FR_GENBANK;
		break;

	    case FR_FASTA:
		gene += line;
		break;

	    case FR_GENBANK:
		final StringTokenizer tokenizer =
		      new StringTokenizer(line.trim());
		if (tokenizer.countTokens() < 2)
		    break;

		tokenizer.nextToken();
		while (tokenizer.hasMoreTokens())
		    gene += tokenizer.nextToken();
	    }
	}

	gene = stripGene(gene);
	if (gene.length() == 0)
	    return null;
	return gene;
    }

    /**
     * Open a gene or a text file.
     *
     * @return the read file.
     */
    private String openFile() {
	if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
	    return null;

	final File file = chooser.getSelectedFile();
	String gene = readGeneFile(file);
	if (gene == null)
	    gene = readTextFile(file);
	return gene;
    }

    /**
     * Action performed when the tab pane is changed.
     *
     * @param e the event.
     */
    private void contentTabbedPane_stateChanged(ChangeEvent e) {
	if (contentTabbedPane.getSelectedIndex() == 1) {
	    insModel.setValue(new Double(costs.defaultIns));
	    delModel.setValue(new Double(costs.defaultDel));
	    subSameModel.setValue(new Double(costs.defaultSubSame));
	    subDiffModel.setValue(new Double(costs.defaultSubDiff));

	    costs.makeTables(gene1Text.getText(), gene2Text.getText(),
			     insertionsContainerPanel, deletionsContainerPanel,
			     substitutionsContainerPanel);
	} else {
	    costs.retrieveValues();
	    insertionsContainerPanel.removeAll();
	    deletionsContainerPanel.removeAll();
	    substitutionsContainerPanel.removeAll();

	    costs.defaultIns = ((Double)insModel.getValue()).doubleValue();
	    costs.defaultDel = ((Double)delModel.getValue()).doubleValue();
	    costs.defaultSubSame =
		       ((Double)subSameModel.getValue()).doubleValue();
	    costs.defaultSubDiff =
		       ((Double)subDiffModel.getValue()).doubleValue();
	}
    }

    /**
     * Action performed when the "Random" button is clicked.
     *
     * @param e the event.
     */
    private void randomButton_actionPerformed(ActionEvent e) {
	final char[] string = new char[RANDOM_LENGTH];
	for (int i = 0; i < string.length; i++)
	    string[i] = RANDOM_CHARS[(int)(Math.random() *
					   RANDOM_CHARS.length)];
	gene1Text.setText(new String(string));
    }

    /**
     * Action performed when the "Generate" button is clicked.
     *
     * @param e the event.
     */
    private void generateButton_actionPerformed(ActionEvent e) {
	final String from = gene1Text.getText();
	String str = new String();
	int pos = 0;

	while (true) {
	    final double rand = Math.random();
	    if (rand < PROBA_INS)
		str += from.charAt((int)(Math.random() * from.length()));
	    else if (rand < PROBA_INS + PROBA_DEL)
		pos++;
	    else if (rand < PROBA_INS + PROBA_DEL + PROBA_SUB) {
		str += from.charAt((int)(Math.random() * from.length()));
		pos++;
	    } else if (pos < from.length())
		str += from.charAt(pos++);
	    else
		break;
	}

	gene2Text.setText(str);
    }

    /**
     * Action performed when the gene 1 "Uppercase" button is clicked.
     *
     * @param e the event.
     */
    private void gene1UppercaseButton_actionPerformed(ActionEvent e) {
	gene1Text.setText(gene1Text.getText().toUpperCase());
    }

    /**
     * Action performed when the gene 2 "Uppercase" button is clicked.
     *
     * @param e the event.
     */
    private void gene2UppercaseButton_actionPerformed(ActionEvent e) {
	gene2Text.setText(gene2Text.getText().toUpperCase());
    }

    /**
     * Action performed when the gene 1 "Load from file..." button is clicked.
     *
     * @param e the event.
     */
    private void gene1LoadButton_actionPerformed(ActionEvent e) {
	final String string = openFile();
	if (string != null)
	    gene1Text.setText(string);
    }

    /**
     * Action performed when the gene 2 "Load from file..." button is clicked.
     *
     * @param e the event.
     */
    private void gene2LoadButton_actionPerformed(ActionEvent e) {
	final String string = openFile();
	if (string != null)
	    gene2Text.setText(string);
    }

    /**
     * Action performed when the insertions "Initialize" button is clicked.
     *
     * @param e the event.
     */
    public void insertionsButton_actionPerformed(ActionEvent e) {
	costs.initializeIns(((Double)insModel.getValue()).doubleValue());
    }

    /**
     * Action performed when the deletions "Initialize" button is clicked.
     *
     * @param e the event.
     */
    public void deletionsButton_actionPerformed(ActionEvent e) {
	costs.initializeDel(((Double)delModel.getValue()).doubleValue());
    }

    /**
     * Action performed when the substitutions "Initialize" button is clicked.
     *
     * @param e the event.
     */
    public void substitutionsButton_actionPerformed(ActionEvent e) {
	costs.initializeSub(((Double)subSameModel.getValue()).doubleValue(),
			    ((Double)subDiffModel.getValue()).doubleValue());
    }

    /**
     * Action performed when the "Align!" button is clicked.
     *
     * @param e the event.
     */
    private void alignButton_actionPerformed(ActionEvent e) {
	gene1Text.setText(stripGene(gene1Text.getText()));
	gene2Text.setText(stripGene(gene2Text.getText()));

	if (gene1Text.getText().length() == 0 &&
	    gene2Text.getText().length() == 0)
	    return;

	contentTabbedPane.setSelectedIndex(0);
	final Aligner aligner = new Aligner(gene1Text.getText(),
					    gene2Text.getText());
	aligner.compute(costs);

	alignmentText.setText(aligner.toString());
	tablePanel.removeAll();
	tablePanel.add(aligner.makeTable());
    }

    /**
     * Action performed when the "Quit" button is clicked.
     *
     * @param e the event.
     */
    private void quitButton_actionPerformed(ActionEvent e) {
	dispose();
    }
}

// End of File
